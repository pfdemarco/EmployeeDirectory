{"version":3,"sources":["components/UseSortableData.js","components/UserTable.js","utils/API.js","components/SearchBox.js","components/Header.js","components/Nav.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["useSortableData","employees","config","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableEmployees","sort","a","b","key","direction","requestSort","UserTable","props","getClassNamesFor","name","undefined","Container","className","type","onClick","map","employee","id","src","pic","alt","firstName","lastName","phone","email","dayMonthDate","yearDate","axios","get","SearchBox","Form","inline","Text","FormControl","value","search","onChange","handleInputChange","placeholder","Header","Nav","Navbar","results","Table","data","setData","setSearch","useEffect","API","then","updatedData","moment","dob","date","format","first","last","login","uuid","picture","medium","getRequiredData","event","searchKeys","target","console","log","filteredList","filter","item","values","toLowerCase","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e125d5fb.chunk.js","sourcesContent":["import { useState, useMemo } from \"react\";\r\n\r\nconst useSortableData = (employees, config = null) => {\r\n  const [sortConfig, setSortConfig] = useState(config);\r\n\r\n  const sortedItems = useMemo(() => {\r\n    let sortableEmployees = [...employees];\r\n    if (sortConfig !== null) {\r\n      sortableEmployees.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return sortableEmployees;\r\n  }, [employees, sortConfig]);\r\n\r\n  // key is heading name\r\n  const requestSort = (key) => {\r\n    let direction = \"ascending\";\r\n    if (\r\n      sortConfig &&\r\n      sortConfig.key === key &&\r\n      sortConfig.direction === \"ascending\"\r\n    ) {\r\n      direction = \"descending\";\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  return { employees: sortedItems, requestSort, sortConfig };\r\n};\r\n\r\nexport default useSortableData;\r\n","import React from \"react\";\r\nimport useSortableData from \"./UseSortableData\";\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst UserTable = (props) => {\r\n  const { employees, requestSort, sortConfig } = useSortableData(\r\n    props.employees\r\n  );\r\n\r\n  // class name is changed from ascending to descending vise versa when buttons clicked in heading sortconfig has a key and a direction passed in\r\n  const getClassNamesFor = (name) => {\r\n    if (!sortConfig) {\r\n      return;\r\n    }\r\n    return sortConfig.key === name ? sortConfig.direction : undefined;\r\n  };\r\n\r\n  return (\r\n    <Container >\r\n    <table className=\"mt-4\">\r\n      {/* headings that are sortable */}\r\n      <thead>\r\n        <tr>\r\n          <th>Profile Pic</th>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort(\"lastName\")}\r\n              className={getClassNamesFor(\"lastName\")}\r\n            >\r\n              Name\r\n            </button>\r\n          </th>\r\n          <th>Phone Number</th>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort(\"email\")}\r\n              className={getClassNamesFor(\"email\")}\r\n            >\r\n              Email Address\r\n            </button>\r\n          </th>\r\n          <th>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => requestSort(\"yearDate\")}\r\n              className={getClassNamesFor(\"yearDate\")}\r\n            >\r\n              DOB\r\n            </button>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      {/* employees list */}\r\n      <tbody>\r\n        {employees.map((employee) => {\r\n          return (\r\n            <tr key={employee.id}>\r\n              <td>\r\n                <img src={employee.pic} alt={employee.firstName}></img>\r\n              </td>\r\n              <td>\r\n                {employee.firstName} {employee.lastName}\r\n              </td>\r\n              <td>{employee.phone}</td>\r\n              <td>{employee.email}</td>\r\n              <td>\r\n                {employee.dayMonthDate}/{employee.yearDate}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=99&nat=au\");\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n\r\nfunction SearchBox(props) {\r\n  return (\r\n    <Form inline>\r\n      <Form.Text className=\"text-white\">\r\n        Search by name, email or phone number\r\n      </Form.Text>\r\n\r\n      <FormControl\r\n        value={props.search}\r\n        onChange={props.handleInputChange}\r\n        type=\"text\"\r\n        className=\"m-3 form-control\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n\r\n\r\n    return(\r\n        <h1>Employee Directory</h1>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport Header from \"./Header\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <Navbar className=\"bg-nav border-10 justify-content-between\">\r\n      <Header />\r\n      <SearchBox handleInputChange={props.handleInputChange} results={props.search}/>\r\n    </Navbar>\r\n  );\r\n}\r\nexport default Nav;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport UserTable from \"./UserTable\";\r\nimport API from \"../utils/API\";\r\nimport Nav from \"./Nav\";\r\nimport moment from \"moment\";\r\n\r\nfunction Table() {\r\n  const [data, setData] = useState();\r\n  const [search, setSearch] = useState();\r\n\r\n  useEffect(() => {\r\n    API.getUsers().then((results) => {\r\n      const updatedData = getRequiredData(results);\r\n      setData(updatedData);\r\n    });\r\n  }, []);\r\n\r\n  // console.log(data);\r\n\r\n  const handleInputChange = (event) => {\r\n    const searchKeys = event.target.value;\r\n    console.log(searchKeys);\r\n\r\n    const filteredList = data.filter((item) => {\r\n      let values =\r\n        item.firstName.toLowerCase() +\r\n        \" \" +\r\n        item.lastName.toLowerCase() +\r\n        item.email.toLowerCase() +\r\n        item.phone.toLowerCase();\r\n      console.log(searchKeys, values);\r\n      if (values.indexOf(searchKeys.toLowerCase()) !== -1) {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setSearch(filteredList);\r\n  };\r\n\r\n  function getRequiredData(results) {\r\n    return results.data.results.map((employee) => {\r\n      let dayMonthDate = moment(employee.dob.date).format(\"DD/MM\");\r\n      let yearDate = moment(employee.dob.date).format(\"YYYY\");\r\n      return {\r\n        firstName: employee.name.first,\r\n        lastName: employee.name.last,\r\n        email: employee.email,\r\n        phone: employee.phone,\r\n        id: employee.login.uuid,\r\n        pic: employee.picture.medium,\r\n        dayMonthDate: dayMonthDate,\r\n        yearDate: yearDate,\r\n      };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Nav handleInputChange={handleInputChange} />\r\n      {/* put the loading in on the if otherwise usertable renders without the data */}\r\n      {/* if no searched keys show data(which is all records) otherwise show searched records */}\r\n      {!data ? \"Loading...\" : <UserTable employees={!search ? data : search} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\nimport Table from \"./components/Table\"\r\n\r\nfunction App() {\r\n  return (\r\n   <Table/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}