{"version":3,"sources":["components/UseSortableData.js","components/UserTable.js","utils/API.js","components/SearchBox.js","components/Header.js","components/Nav.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["useSortableData","employees","config","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableEmployees","sort","a","b","key","direction","requestSort","UserTable","props","getClassNamesFor","name","undefined","Container","className","type","onClick","map","employee","id","src","pic","alt","firstName","lastName","phone","email","dayMonthDate","yearDate","axios","get","SearchBox","Form","inline","Text","FormControl","value","search","onChange","handleInputChange","placeholder","Header","Nav","Navbar","results","Table","data","setData","setSearch","useEffect","API","then","updatedData","moment","dob","date","format","first","last","login","uuid","picture","medium","getRequiredData","event","searchKeys","target","console","log","filteredList","filter","item","values","toLowerCase","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dedf6604.chunk.js","sourcesContent":["import { useState, useMemo } from \"react\";\n\nconst useSortableData = (employees, config = null) => {\n  const [sortConfig, setSortConfig] = useState(config);\n\n  const sortedItems = useMemo(() => {\n    let sortableEmployees = [...employees];\n    if (sortConfig !== null) {\n      sortableEmployees.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableEmployees;\n  }, [employees, sortConfig]);\n\n  // key is heading name\n  const requestSort = (key) => {\n    let direction = \"ascending\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"ascending\"\n    ) {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { employees: sortedItems, requestSort, sortConfig };\n};\n\nexport default useSortableData;\n","import React from \"react\";\nimport useSortableData from \"./UseSortableData\";\nimport Container from 'react-bootstrap/Container';\n\nconst UserTable = (props) => {\n  const { employees, requestSort, sortConfig } = useSortableData(\n    props.employees\n  );\n\n  // class name is changed from ascending to descending vise versa when buttons clicked in heading sortconfig has a key and a direction passed in\n  const getClassNamesFor = (name) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  return (\n    <Container >\n    <table className=\"mt-4\">\n      {/* headings that are sortable */}\n      <thead>\n        <tr>\n          <th>Profile Pic</th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"lastName\")}\n              className={getClassNamesFor(\"lastName\")}\n            >\n              Name\n            </button>\n          </th>\n          <th>Phone Number</th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"email\")}\n              className={getClassNamesFor(\"email\")}\n            >\n              Email Address\n            </button>\n          </th>\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort(\"yearDate\")}\n              className={getClassNamesFor(\"yearDate\")}\n            >\n              DOB\n            </button>\n          </th>\n        </tr>\n      </thead>\n      {/* employees list */}\n      <tbody>\n        {employees.map((employee) => {\n          return (\n            <tr key={employee.id}>\n              <td>\n                <img src={employee.pic} alt={employee.firstName}></img>\n              </td>\n              <td>\n                {employee.firstName} {employee.lastName}\n              </td>\n              <td>{employee.phone}</td>\n              <td>{employee.email}</td>\n              <td>\n                {employee.dayMonthDate}/{employee.yearDate}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n    </Container>\n  );\n};\n\nexport default UserTable;\n","import axios from \"axios\";\n\nexport default {\n  getUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=99&nat=au\");\n  },\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nfunction SearchBox(props) {\n  return (\n    <Form inline>\n      <Form.Text className=\"text-white\">\n        Search by name, email or phone number\n      </Form.Text>\n\n      <FormControl\n        value={props.search}\n        onChange={props.handleInputChange}\n        type=\"text\"\n        className=\"m-3 form-control\"\n        placeholder=\"Search\"\n      />\n    </Form>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nfunction Header() {\n\n\n    return(\n        <h1>Employee Directory</h1>\n    )\n}\n\nexport default Header","import React from \"react\";\nimport SearchBox from \"./SearchBox\";\nimport Header from \"./Header\";\nimport Navbar from 'react-bootstrap/Navbar';\n\nfunction Nav(props) {\n  return (\n    <Navbar className=\"bg-nav border-10 justify-content-between\">\n      <Header />\n      <SearchBox handleInputChange={props.handleInputChange} results={props.search}/>\n    </Navbar>\n  );\n}\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport UserTable from \"./UserTable\";\nimport API from \"../utils/API\";\nimport Nav from \"./Nav\";\nimport moment from \"moment\";\n\nfunction Table() {\n  const [data, setData] = useState();\n  const [search, setSearch] = useState();\n\n  useEffect(() => {\n    API.getUsers().then((results) => {\n      const updatedData = getRequiredData(results);\n      setData(updatedData);\n    });\n  }, []);\n\n  // console.log(data);\n\n  const handleInputChange = (event) => {\n    const searchKeys = event.target.value;\n    console.log(searchKeys);\n\n    const filteredList = data.filter((item) => {\n      let values =\n        item.firstName.toLowerCase() +\n        \" \" +\n        item.lastName.toLowerCase() +\n        item.email.toLowerCase() +\n        item.phone.toLowerCase();\n      console.log(searchKeys, values);\n      if (values.indexOf(searchKeys.toLowerCase()) !== -1) {\n        return item;\n      }\n    });\n\n    setSearch(filteredList);\n  };\n\n  function getRequiredData(results) {\n    return results.data.results.map((employee) => {\n      let dayMonthDate = moment(employee.dob.date).format(\"DD/MM\");\n      let yearDate = moment(employee.dob.date).format(\"YYYY\");\n      return {\n        firstName: employee.name.first,\n        lastName: employee.name.last,\n        email: employee.email,\n        phone: employee.phone,\n        id: employee.login.uuid,\n        pic: employee.picture.medium,\n        dayMonthDate: dayMonthDate,\n        yearDate: yearDate,\n      };\n    });\n  }\n\n  return (\n    <div>\n      <Nav handleInputChange={handleInputChange} />\n      {/* put the loading in on the if otherwise usertable renders without the data */}\n      {/* if no searched keys show data(which is all records) otherwise show searched records */}\n      {!data ? \"Loading...\" : <UserTable employees={!search ? data : search} />}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\n\nimport Table from \"./components/Table\"\n\nfunction App() {\n  return (\n   <Table/>\n  );\n}\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n  \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}